// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5114.MyRobot2016;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.USBCamera;

import org.usfirst.frc.team5114.MyRobot2016.commands.*;
import org.usfirst.frc.team5114.MyRobot2016.subsystems.*;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;
import com.ni.vision.VisionException;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static BallLaunch ballLaunch;
    public static BallIntake ballIntake;
    public static GateKeeper gateKeeper;
    public static RightArm rightArm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public enum CameraLoc { None, Front, Back };

    
 	//camera stuff 
 	static boolean cameraSwitchPressedLastTime = false; 
 //	static Image img = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0); 
 //	static boolean rearCam = false; // stores whether the front camera is on 
 //	static CameraLoc camLocation = CameraLoc.None;
 
 	public static USBCamera cameraFront; 
 	public static USBCamera cameraBack; 
 
 
 //	public static CameraServer camServer = CameraServer.getInstance(); 
    /****************************************************/
    
// 	public static void cameraInit()
// 	{
//		try 
//		{ 
// 			cameraFront = new USBCamera("cam0"); 
//			cameraBack = new USBCamera("cam1"); 
// 			cameraFront.openCamera(); 
// 			cameraBack.openCamera(); 
// 			cameraFront.startCapture(); // startCapture so that it doesn't try to take a picture before the camera is on 
// 			camServer.setQuality(100); 
// 		} 
//		catch (VisionException e) 
//		{ 
// 			System.out.println("VISION EXCEPTION ~ " + e); 
// 		} 
// 		
// 	}
 	
// 	public static void setCamera(CameraLoc camLoc)
// 	{
// 		if ( camLoc != camLocation && camLoc != CameraLoc.None )
// 		{
// 			try
// 			{
// 				// Switch current off
// 				switch( camLocation )
// 				{
// 					case Front:
// 	 					cameraFront.stopCapture(); 
// 						break;
// 					case Back:
// 						cameraBack.stopCapture(); 
// 						break;
// 				}
// 				// Switch new on
// 				switch( camLoc )
// 				{
// 					case Front:
// 						if (camLocation != CameraLoc.None )
// 						{
// 							cameraFront.startCapture();
// 						}
// 	 					cameraFront.getImage(img);
// 	 	 				camServer.setImage(img); // puts image on the dashboard
// 	 	 				camLocation = CameraLoc.Front;
// 						break;
// 					case Back:
// 						cameraBack.startCapture(); 
// 						cameraBack.getImage(img);
// 		 				camServer.setImage(img); // puts image on the dashboard
// 	 	 				camLocation = CameraLoc.Back;
// 						break;
// 				}
// 			}
// 			catch(NullPointerException e)
// 			{
// 				
// 			}
// 			catch(VisionException e)
// 			{
// 				
// 			}
// 		}
// 	}
//    
//    
//    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        ballLaunch = new BallLaunch();
        ballIntake = new BallIntake();
        gateKeeper = new GateKeeper();
        rightArm = new RightArm();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        // Initialize PID values for talon motor controllers
        RobotMap.driveTrainTalon1.setF(0.0);
        RobotMap.driveTrainTalon1.setPID(0, 0, 0);
        
        RobotMap.driveTrainTalon2.changeControlMode(TalonControlMode.Follower);
        RobotMap.driveTrainTalon2.set(RobotMap.driveTrainTalon1.getDeviceID());
        
        RobotMap.driveTrainTalon3.setF(0.0);
        RobotMap.driveTrainTalon3.setPID(0, 0, 0);
        
        RobotMap.driveTrainTalon4.changeControlMode(TalonControlMode.Follower);
        RobotMap.driveTrainTalon4.set(RobotMap.driveTrainTalon3.getDeviceID());
        
        RobotMap.ballLaunchTalon5.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
        RobotMap.ballLaunchTalon5.reverseSensor(false);
        RobotMap.ballLaunchTalon5.configNominalOutputVoltage(+0, -0);
        RobotMap.ballLaunchTalon5.configPeakOutputVoltage(+12.0, 0.0);
        RobotMap.ballLaunchTalon5.setProfile(0);
        RobotMap.ballLaunchTalon5.setF(0.0211); //calculated off of max RPM 7100
        RobotMap.ballLaunchTalon5.setPID(0, 0, 0);
        
        // Necessary code for camera feed
        
     //   cameraInit();
       // setCamera(camLocation.Front);
        CameraServer server = CameraServer.getInstance();
        server.setQuality(30);
        server.startAutomaticCapture("cam0");
        
        // Smart Dashboard initiation
        SmartDashboard.putNumber("Launch Power", 1.0);
        SmartDashboard.putNumber("Intake Speed", 0.5);
        SmartDashboard.putNumber("RPM(Launcher)", 0.0);
        SmartDashboard.putNumber("Low Goal Speed", 1.0);
        SmartDashboard.putNumber("Gate Speed", 0.5);
        SmartDashboard.putNumber("Drive Power", 0.8);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
