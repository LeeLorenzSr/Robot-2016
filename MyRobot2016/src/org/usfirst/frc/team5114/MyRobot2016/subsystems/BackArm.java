//RobotBuilder Version: 2.0
//
//This file was generated by RobotBuilder. It contains sections of
//code that are automatically generated and assigned by robotbuilder.
//These sections will be updated in the future when you export to
//Java from RobotBuilder. Do not put any code or make any change in
//the blocks indicating autogenerated code or it will be lost on an
//update. Deleting the comments indicating the section will prevent
//it from being updated in the future.


package org.usfirst.frc.team5114.MyRobot2016.subsystems;

import javax.management.timer.Timer;

import org.usfirst.frc.team5114.MyRobot2016.Robot;
import org.usfirst.frc.team5114.MyRobot2016.RobotMap;
import org.usfirst.frc.team5114.MyRobot2016.commands.*;

import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
*
*/
public class BackArm extends Subsystem {
 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
 private final CANTalon winchTalon6 = RobotMap.robotLiftTalon6;
 private final CANTalon hookTalon9 = RobotMap.robotLiftTalon9;
 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

 // Put methods for controlling this subsystem
 // here. Call these from Commands.
 
 private double backArmSpeed = 0.35;
 
 public void dropBackArm(double percentVolt)
 {
	 // check with donald to make sure that this need not be switched
	 winchTalon6.set(percentVolt);
 }
 
 public void liftBackArm(double percentVolt)
 {
	 // check with donald to make sure that this need not be switched
	 winchTalon6.set(-percentVolt);
 }
 
 public void stop()
 {
	 winchTalon6.set(0);
 }
 
 public void driveBackArm()
 {
	 backArmSpeed = SmartDashboard.getNumber("Back Arm Speed", 0.35);
	 winchTalon6.set(Robot.oi.controller.getAxis(AxisType.kY) * backArmSpeed);
	 //talon6.enableBrakeMode(true);
 }
 
 public void driveHook()
 {
	 int degreesPOV = Robot.oi.controller.getPOV(0);
	 double hookLiftPercentVolt = SmartDashboard.getNumber("Hook Lift Speed");
	 double hookDropPercentVolt = SmartDashboard.getNumber("Hook Drop Speed");
	 SmartDashboard.putNumber("POV", degreesPOV);
	 
	 if (degreesPOV == 0)
		 hookTalon9.set(hookLiftPercentVolt);
	 else if (degreesPOV == 180)
		 hookTalon9.set(-hookDropPercentVolt);
	 else
		 hookTalon9.set(0);
 }
 
 public void initDefaultCommand() {
     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

     // Set the default command for a subsystem here.
     setDefaultCommand(new DriveWinch());
 }
}