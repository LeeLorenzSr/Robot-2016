// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5114.MyRobot2016.subsystems;

import java.awt.Robot;

import org.usfirst.frc.team5114.MyRobot2016.RobotMap;
import org.usfirst.frc.team5114.MyRobot2016.commands.*;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon rightTalon = RobotMap.driveTrainTalon1;
    private final CANTalon talon2 = RobotMap.driveTrainTalon2;
    private final CANTalon leftTalon = RobotMap.driveTrainTalon3;
    private final CANTalon talon4 = RobotMap.driveTrainTalon4;
    private final AnalogGyro gyro = RobotMap.gyro;
    private final Accelerometer accel = RobotMap.accel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    private boolean dirFlip = false;
    private double power = 0.75;
    
    public void setPower(double newVal) { power = newVal; }
    
    public void flipDirection()
    {
    	dirFlip = !dirFlip;
    }
    
    public void driveNorth(double percentVolt)
    {
    	// These values are correct
    	power = percentVolt;
    	rightTalon.set(-power);
    	leftTalon.set(power);
    }
    
    public void driveSouth(double percentVolt)
    {
    	// These values are correct
    	power = -percentVolt;
    	rightTalon.set(-power);
    	leftTalon.set(power);
    }
    
    public void rotateLeft(double percentVolt)
    {
    	rightTalon.set(-percentVolt);
    	leftTalon.set(-percentVolt);
    }
    
    public void rotateRight(double percentVolt)
    {
    	rightTalon.set(percentVolt);
    	leftTalon.set(percentVolt);
    }
    
    public void stop()
    {
    	rightTalon.set(0.0);
    	leftTalon.set(0.0);
    }
    
    public void joystickDrive(Joystick leftStick, Joystick rightStick)
    {
    	if (dirFlip)
    	{
    		// Direction is flipped, forward is backwards
    		
    		//Right side
    	    rightTalon.set(-power * leftStick.getY());
    	    
    	    //Left Side
    	    leftTalon.set(power * rightStick.getY());
    	}
    	else
    	{
    		// Normal drive, forwards is forwards
    		
    		//Right side
    	    rightTalon.set(power * rightStick.getY());
    	    
    	    //Left Side
    	    leftTalon.set(-power * leftStick.getY());
    	}
    }
    
    public void testMethod()
    {
    	//gyro.
    	//accel.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}